{
  "hash": "1df076b26afa26b62ed7b3e7f9fe96fa",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: py-polars\nexecute:\n  freeze: auto\n  cache: true\n---\n\n## Load libraries\n\n::: {#e0e51a06 .cell cache='false' execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\nimport time\n```\n:::\n\n\n## Scan data \n\n::: {#2705f25f .cell execution_count=2}\n``` {.python .cell-code}\nnyc = pl.scan_parquet(\"nyc-taxi/**/*.parquet\", hive_partitioning=True) # true is default\nnyc\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<h4>NAIVE QUERY PLAN</h4><p>run <b>LazyFrame.show_graph()</b> to see the optimized version</p><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 10.0.1 (20240210.2158)\n -->\n<!-- Title: polars_query Pages: 1 -->\n<svg width=\"457pt\" height=\"66pt\"\n viewBox=\"0.00 0.00 456.75 65.50\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 61.5)\">\n<title>polars_query</title>\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-61.5 452.75,-61.5 452.75,4 -4,4\"/>\n<!-- [Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45;] -->\n<g id=\"node1\" class=\"node\">\n<title>[Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45;]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"448.75,-57.5 0,-57.5 0,0 448.75,0 448.75,-57.5\"/>\n<text text-anchor=\"middle\" x=\"224.38\" y=\"-40.2\" font-family=\"Times,serif\" font-size=\"14.00\">[Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;</text>\n<text text-anchor=\"middle\" x=\"224.38\" y=\"-23.7\" font-family=\"Times,serif\" font-size=\"14.00\">π */?;</text>\n<text text-anchor=\"middle\" x=\"224.38\" y=\"-7.2\" font-family=\"Times,serif\" font-size=\"14.00\">σ &#45;]</text>\n</g>\n</g>\n</svg>\n```\n:::\n:::\n\n\n## First example\n\nPolars operations are registered as queries until they are collected \n\n::: {#3bb37767 .cell execution_count=3}\n``` {.python .cell-code}\nq1 = (\n    nyc\n    .group_by([\"passenger_count\"])\n    .agg([\n            pl.mean(\"tip_amount\")#.alias(\"mean_tip\") ## alias is optional\n        ])\n    .sort(\"passenger_count\") ## optional\n)\nq1\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<h4>NAIVE QUERY PLAN</h4><p>run <b>LazyFrame.show_graph()</b> to see the optimized version</p><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 10.0.1 (20240210.2158)\n -->\n<!-- Title: polars_query Pages: 1 -->\n<svg width=\"452pt\" height=\"231pt\"\n viewBox=\"0.00 0.00 452.25 231.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 227)\">\n<title>polars_query</title>\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-227 448.25,-227 448.25,4 -4,4\"/>\n<!-- SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)] -->\n<g id=\"node1\" class=\"node\">\n<title>SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"328,-223 116.25,-223 116.25,-187 328,-187 328,-223\"/>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-199.95\" font-family=\"Times,serif\" font-size=\"14.00\">SORT BY [col(&quot;passenger_count&quot;)]</text>\n</g>\n<!-- AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)] -->\n<g id=\"node2\" class=\"node\">\n<title>AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"322.38,-151 121.88,-151 121.88,-93.5 322.38,-93.5 322.38,-151\"/>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-133.7\" font-family=\"Times,serif\" font-size=\"14.00\">AGG [col(&quot;tip_amount&quot;).mean()]</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-117.2\" font-family=\"Times,serif\" font-size=\"14.00\">BY</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-100.7\" font-family=\"Times,serif\" font-size=\"14.00\">[col(&quot;passenger_count&quot;)] [(0, 1)]</text>\n</g>\n<!-- SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)]&#45;&#45;AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)] -->\n<g id=\"edge1\" class=\"edge\">\n<title>SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)]&#45;&#45;AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]</title>\n<path fill=\"none\" stroke=\"black\" d=\"M222.12,-186.88C222.12,-176.6 222.12,-163.27 222.12,-151.47\"/>\n</g>\n<!-- Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)] -->\n<g id=\"node3\" class=\"node\">\n<title>Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"444.25,-57.5 0,-57.5 0,0 444.25,0 444.25,-57.5\"/>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-40.2\" font-family=\"Times,serif\" font-size=\"14.00\">Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-23.7\" font-family=\"Times,serif\" font-size=\"14.00\">π */?;</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-7.2\" font-family=\"Times,serif\" font-size=\"14.00\">σ &#45;</text>\n</g>\n<!-- AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]&#45;&#45;Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)] -->\n<g id=\"edge2\" class=\"edge\">\n<title>AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]&#45;&#45;Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)]</title>\n<path fill=\"none\" stroke=\"black\" d=\"M222.12,-93.3C222.12,-82.05 222.12,-69.11 222.12,-57.84\"/>\n</g>\n</g>\n</svg>\n```\n:::\n:::\n\n\n(Note: this is the naive query plan, not the optimized query that **polars**\nwill actually implement for us. We'll come back to this idea shortly.)\n\nCalling `collect()` enforces computation.\n\n::: {#69823a70 .cell execution_count=4}\n``` {.python .cell-code}\ntic = time.time()\ndat1 = q1.collect()\ntoc = time.time()\n\ndat1\nprint(f\"Time difference of {toc - tic} seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 3.9650979042053223 seconds\n```\n:::\n:::\n\n\n## Aggregation\n\nSubsetting along partition dimensions allows for even more efficiency gains.\n\n::: {#48e93edd .cell execution_count=5}\n``` {.python .cell-code}\nq2 = (\n    nyc\n    .filter(pl.col(\"month\") <= 3)\n    .group_by([\"month\", \"passenger_count\"])\n    .agg([\n            pl.mean(\"tip_amount\").alias(\"mean_tip\")\n        ])\n    .sort(\"passenger_count\")\n)\n```\n:::\n\n\nLet's take a look at the optimized query that Polars will implement for us.\n\n::: {#c0ae1d1c .cell execution_count=6}\n``` {.python .cell-code}\n# q2             # naive\nq2.show_graph()  # optimized\n```\n\n::: {.cell-output .cell-output-display}\n![](py-polars_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n::: {#6c474a66 .cell execution_count=7}\n``` {.python .cell-code}\ntic = time.time()\ndat2 = q2.collect()\ntoc = time.time()\n\ndat2\nprint(f\"Time difference of {toc - tic} seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 3.6900200843811035 seconds\n```\n:::\n:::\n\n\nHigh-dimensional grouping example.\n\n::: {#3029dfae .cell execution_count=8}\n``` {.python .cell-code}\nq3 = (\n    nyc\n    .group_by([\"passenger_count\", \"trip_distance\"])\n    .agg([\n        pl.mean(\"tip_amount\").alias(\"mean_tip\"),\n        pl.mean(\"fare_amount\").alias(\"mean_fare\"),\n        ])\n    .sort([\"passenger_count\", \"trip_distance\"])\n)\n```\n:::\n\n\nThis query provides an example where **polars** is noticeably slower than\nDuckDB.\n\n::: {#10a68ed9 .cell execution_count=9}\n``` {.python .cell-code}\ntic = time.time()\ndat3 = q3.collect()\ntoc = time.time()\n\ndat3\nprint(f\"Time difference of {toc - tic} seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 55.545665979385376 seconds\n```\n:::\n:::\n\n\nAs an aside, if we didn't care about column aliases (or sorting), then the previous query could be shortened to:\n\n```python\n(\n    nyc\n    .group_by([\"passenger_count\", \"trip_distance\"])\n    .agg(pl.col([\"tip_amount\", \"fare_amount\"]).mean())\n    .collect()\n)\n```\n\n## Pivot (reshape)\n\nIn **polars**, we have two distinct reshape methods:\n\n- `pivot`: => long to wide\n- `melt`: => wide to long \n\nHere we'll _melt_ to go from wide to long and use the eager execution engine\n(i.e., on the `dat3` DataFrame object that we've already computed) for\nexpediency.\n\n::: {#8be3feb3 .cell execution_count=10}\n``` {.python .cell-code}\n(    \n    dat3\n    .melt(id_vars = [\"passenger_count\", \"trip_distance\"])\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (51_138, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>passenger_count</th><th>trip_distance</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>f64</td><td>str</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>0.0</td><td>&quot;mean_tip&quot;</td><td>1.345135</td></tr><tr><td>0</td><td>0.01</td><td>&quot;mean_tip&quot;</td><td>0.178571</td></tr><tr><td>0</td><td>0.02</td><td>&quot;mean_tip&quot;</td><td>4.35</td></tr><tr><td>0</td><td>0.03</td><td>&quot;mean_tip&quot;</td><td>16.25</td></tr><tr><td>0</td><td>0.04</td><td>&quot;mean_tip&quot;</td><td>0.03</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>208</td><td>5.1</td><td>&quot;mean_fare&quot;</td><td>12.5</td></tr><tr><td>208</td><td>6.6</td><td>&quot;mean_fare&quot;</td><td>17.7</td></tr><tr><td>247</td><td>3.31</td><td>&quot;mean_fare&quot;</td><td>11.5</td></tr><tr><td>249</td><td>1.69</td><td>&quot;mean_fare&quot;</td><td>8.5</td></tr><tr><td>254</td><td>1.02</td><td>&quot;mean_fare&quot;</td><td>6.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Joins (merges)\n\n::: {#fa8a1097 .cell execution_count=11}\n``` {.python .cell-code}\nmean_tips  = nyc.group_by(\"month\").agg(pl.col(\"tip_amount\").mean())\nmean_fares = nyc.group_by(\"month\").agg(pl.col(\"fare_amount\").mean())\n```\n:::\n\n\n::: {#8f24e2b3 .cell execution_count=12}\n``` {.python .cell-code}\n(\n    mean_tips\n    .join(\n        mean_fares,\n        on = \"month\",\n        how = \"left\" # default is inner join\n    )\n    .collect()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (12, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>month</th><th>tip_amount</th><th>fare_amount</th></tr><tr><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>3</td><td>1.056353</td><td>10.223107</td></tr><tr><td>9</td><td>1.254601</td><td>12.391198</td></tr><tr><td>6</td><td>1.091082</td><td>10.548651</td></tr><tr><td>12</td><td>1.237651</td><td>12.313953</td></tr><tr><td>1</td><td>1.007817</td><td>9.813488</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>7</td><td>1.059312</td><td>10.379943</td></tr><tr><td>5</td><td>1.078014</td><td>10.585157</td></tr><tr><td>11</td><td>1.250903</td><td>12.270138</td></tr><tr><td>8</td><td>1.079521</td><td>10.49265</td></tr><tr><td>2</td><td>1.036874</td><td>9.94264</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "py-polars_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}